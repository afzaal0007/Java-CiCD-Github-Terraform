name: Deploy Infrastructure

on:
  workflow_call:
    inputs:
      aws_role_arn:
        required: true
        type: string
      aws_region:
        required: true
        type: string
      terraform_version:
        required: true
        type: string
    secrets: {}
permissions:
  id-token: write
  contents: read
jobs:
  terraform-deploy:
    name: Terraform Deploy
    runs-on: ubuntu-latest
    environment: production  # Added environment for better tracking
    timeout-minutes: 30      # Added timeout to prevent hanging

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ inputs.aws_region }}
          role-session-name: GitHubActionsTerraformDeploy
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false  # Explicitly disable wrapper

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ inputs.aws_role_arn }}
          aws-region: ${{ inputs.aws_region }}  # Fixed typo: was "aws-region" (should match your usage)
          mask-aws-account-id: true  # Added security best practice

      - name: Terraform Init
        id: init
        run: terraform init -input=false
        env:
          TF_IN_AUTOMATION: true  # Recommended for CI/CD environments

      - name: Terraform Format
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -out=tfplan

      - name: Terraform Apply
        if: success()
        run: terraform apply -input=false -auto-approve tfplan

      - name: Output Terraform State
        if: always()
        run: |
          terraform output -json > outputs.json
          echo "TF_OUTPUTS=$(cat outputs.json | jq -c '.')" >> $GITHUB_OUTPUT