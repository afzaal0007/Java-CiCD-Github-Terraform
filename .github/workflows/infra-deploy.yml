name: Infrastructure Deployment

on:
  workflow_call:
    secrets:
      AWS_ROLE_ARN:
        required: true
      AWS_REGION:
        required: true
    inputs:
      terraform_version:
        required: true
        type: string

permissions:
  id-token: write
  contents: read

env:
  TF_WORKING_DIR: './terraform'
  MAX_RETRIES: 3
  LOCK_TIMEOUT: '25m'
  RETRY_DELAY: '30s'
  STALE_LOCK_THRESHOLD: '900' # 15 minutes in seconds

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq awscli

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}
        role-duration-seconds: 3600
        audience: sts.amazonaws.com
        role-session-name: GitHubActionsOIDC

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform_version }}
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform init -no-color -input=false

    - name: Terraform Format
      run: terraform fmt -check -no-color -recursive

    - name: Terraform Validate
      run: terraform validate -no-color

    - name: Terraform Plan with Enhanced Lock Handling
      run: |
        function get_lock_age() {
          LOCK_ID=$1
          # Get lock creation time from DynamoDB (requires proper permissions)
          LOCK_CREATED=$(aws dynamodb get-item \
            --table-name terraform-lock-table \
            --key '{"LockID":{"S":"'$LOCK_ID'"}}' \
            --query 'Item.Created.N' --output text 2>/dev/null || echo 0)
          
          if [ "$LOCK_CREATED" -gt 0 ]; then
            NOW=$(date +%s)
            echo $((NOW - LOCK_CREATED))
          else
            echo 0
          fi
        }

        retry_count=0
        while [ $retry_count -lt $MAX_RETRIES ]; do
          echo "Attempt $((retry_count + 1)) of $MAX_RETRIES"
          
          if terraform plan -input=false -no-color -out=tfplan -lock-timeout=$LOCK_TIMEOUT; then
            echo "Plan completed successfully"
            exit 0
          else
            # Extract lock ID from error output
            LOCK_ID=$(terraform plan -input=false -no-color -out=tfplan 2>&1 | grep -oP 'ID:\s*\K[^\s]+' || true)
            
            if [ -n "$LOCK_ID" ]; then
              echo "Found lock ID: $LOCK_ID"
              
              # Check if lock is stale
              LOCK_AGE=$(get_lock_age "$LOCK_ID")
              if [ "$LOCK_AGE" -gt $STALE_LOCK_THRESHOLD ]; then
                echo "Lock is stale ($LOCK_AGE seconds old), forcing unlock"
                LOCK_INFO=$(terraform force-unlock -force "$LOCK_ID" 2>&1 || true)
                if [[ "$LOCK_INFO" == *"successfully unlocked"* ]]; then
                  echo "Stale lock removed"
                else
                  echo "Force unlock failed"
                fi
              else
                echo "Lock is recent ($LOCK_AGE seconds old), waiting..."
              fi
            fi
            
            ((retry_count++))
            if [ $retry_count -lt $MAX_RETRIES ]; then
              echo "Waiting $RETRY_DELAY before retry..."
              sleep ${RETRY_DELAY/s/}  # Remove 's' suffix for sleep
            fi
          fi
        done

        echo "Max retries reached, proceeding with lock disabled (not recommended for production)"
        terraform plan -input=false -no-color -out=tfplan -lock=false

    - name: Terraform Apply with Enhanced Lock Handling
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      run: |
        function release_lock() {
          LOCK_ID=$(terraform apply -auto-approve -no-color -lock-timeout=1m tfplan 2>&1 | grep -oP 'ID:\s*\K[^\s]+' || true)
          if [ -n "$LOCK_ID" ]; then
            echo "Attempting to release lock: $LOCK_ID"
            LOCK_AGE=$(aws dynamodb get-item \
              --table-name terraform-lock-table \
              --key '{"LockID":{"S":"'$LOCK_ID'"}}' \
              --query 'Item.Created.N' --output text 2>/dev/null || echo 0)
            
            if [ "$LOCK_AGE" -gt $STALE_LOCK_THRESHOLD ]; then
              echo "Force unlocking stale lock (age: $LOCK_AGE seconds)"
              terraform force-unlock -force "$LOCK_ID" || true
            else
              echo "Lock is recent ($LOCK_AGE seconds), not forcing unlock"
            fi
          fi
        }

        retry_count=0
        while [ $retry_count -lt $MAX_RETRIES ]; do
          echo "Attempt $((retry_count + 1)) of $MAX_RETRIES"
          
          if terraform apply -auto-approve -no-color -lock-timeout=$LOCK_TIMEOUT tfplan; then
            echo "Apply completed successfully"
            exit 0
          else
            echo "Apply attempt failed"
            release_lock
            
            ((retry_count++))
            if [ $retry_count -lt $MAX_RETRIES ]; then
              echo "Waiting $RETRY_DELAY before retry..."
              sleep ${RETRY_DELAY/s/}
            fi
          fi
        done

        echo "Max retries reached, proceeding with lock disabled (not recommended for production)"
        terraform apply -auto-approve -no-color tfplan -lock=false

    - name: Terraform Output
      if: success()
      run: |
        echo "Capturing Terraform outputs..."
        terraform output -no-color -json > terraform-output.json

    - name: Upload Terraform Output
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: terraform-output
        path: ${{ env.TF_WORKING_DIR }}/terraform-output.json
        retention-days: 5

    - name: Cleanup
      if: always()
      run: |
        rm -f terraform-output.json
        rm -f tfplan
        rm -rf .terraform