name: Build and Push Docker Image

on:
  workflow_call:
    inputs:
      ecr_repository:
        required: true
        type: string
    secrets:
      AWS_ROLE_ARN:
        required: true
      AWS_REGION:
        required: true

permissions:
  id-token: write  # Needed for OIDC auth
  contents: read
jobs:
  build-push-image:
    name: Build and Push Image
    runs-on: ubuntu-latest
    environment: production  # Added for better tracking
    timeout-minutes: 30      # Added timeout to prevent hanging
    
    outputs:
      image_tag: ${{ steps.set-tag.outputs.tag }}
      image_uri: ${{ steps.build-image.outputs.image_uri }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ inputs.aws_role_arn }}
          aws-region: ${{ inputs.aws_region }}
          mask-aws-account-id: true  # Security best practice

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set Image Tag
        id: set-tag
        run: |
          # Use both timestamp and short SHA for better traceability
          echo "tag=$(date +%Y%m%d%H%M%S)-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT

      - name: Build, Tag, and Push Docker Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr_repository }}
          IMAGE_TAG: ${{ steps.set-tag.outputs.tag }}
        run: |
          # Build with Docker BuildKit for better performance
          DOCKER_BUILDKIT=1 docker build \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --progress plain \
            .
          
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Output full image URI for downstream jobs
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Verify Image Push
        run: |
          echo "Image successfully pushed to:"
          echo "${{ steps.build-image.outputs.image_uri }}"
          echo "Digest: $(docker inspect ${{ steps.build-image.outputs.image_uri }} --format='{{.RepoDigests}}')"