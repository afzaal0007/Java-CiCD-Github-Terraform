name: Terraform Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
      confirmation:
        description: 'Type "destroy" to confirm'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

env:
  TERRAFORM_VERSION: '1.5.0'
  TF_WORKING_DIR: 'terraform'  # Changed from './terraform' to 'terraform'

jobs:
  terraform-destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    environment: production
    
    if: github.event.inputs.confirmation == 'destroy'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify Terraform directory exists
        run: |
          if [ ! -d "${{ env.TF_WORKING_DIR }}" ]; then
            echo "::error::Terraform directory '${{ env.TF_WORKING_DIR }}' not found"
            ls -la  # Debug directory contents
            exit 1
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init and Select Workspace
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init -no-color
          terraform workspace select ${{ github.event.inputs.environment }} || \
          terraform workspace new ${{ github.event.inputs.environment }}

      - name: Terraform Destroy
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
         # Check if state contains any resources
         if terraform state list >/dev/null 2>&1; then
         echo "Resources found in state - refreshing state and proceeding with destroy"
         terraform refresh -no-color
         terraform destroy -auto-approve -no-color
         else
         echo "No resources in state - nothing to destroy"
         fi