name: Terraform Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
      confirmation:
        description: 'Type "destroy" to confirm'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

env:
  TERRAFORM_VERSION: '1.5.0'

jobs:
  terraform-destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    environment: production
    
    # Only proceed if confirmation equals "destroy"
    if: github.event.inputs.confirmation == 'destroy'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: |
          terraform init

      - name: Terraform Workspace
        run: |
          terraform workspace select ${{ github.event.inputs.environment }} || terraform workspace new ${{ github.event.inputs.environment }}

      - name: Terraform Destroy Plan
        run: |
          terraform plan -destroy -out=destroy.tfplan
        
      - name: Terraform Destroy
        run: |
          terraform apply -auto-approve destroy.tfplan

      - name: Cleanup
        if: always()
        run: |
          rm -f destroy.tfplan

      - name: Notify Destroy Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const message = `Infrastructure destruction for environment ${{ github.event.inputs.environment }} completed with status: ${status}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: message
            });
