name: CI-CD-Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: production-${{ github.ref }}
  cancel-in-progress: true

# Define environment variables
env:
  ECR_REPOSITORY: afzaal-ecr-repo
  EKS_CLUSTER_NAME: my-cluster
  TERRAFORM_VERSION: 1.5.0
  PRODUCTION_URL: https://your-production-url.com

permissions:
  id-token: write
  contents: read

jobs:
  terraform-deploy:
    name: Deploy Infrastructure
    uses: ./.github/workflows/infra-deploy.yml
    secrets:
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    with:
      terraform_version: '1.5.0'    # Directly specify the version

  build-and-push:
    needs: terraform-deploy
    uses: ./.github/workflows/build-push.yml
    with:
      ecr_repository: 'afzaal-ecr-repo'    # Directly specify the repository name
    secrets: inherit

  deploy-application:
    name: Deploy Application
    needs: 
      - build-and-push
      - terraform-deploy
    runs-on: ubuntu-latest
    timeout-minutes: 45
    environment:
      name: production
      url: ${{ env.PRODUCTION_URL }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: |
            ~/.kube
            ~/.helm
          key: ${{ runner.os }}-k8s-${{ hashFiles('**/*.yaml') }}
          restore-keys: |
            ${{ runner.os }}-k8s-

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Application to EKS
        env:
          EKS_CLUSTER_NAME: ${{ env.EKS_CLUSTER_NAME }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag }}
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region ${{ secrets.AWS_REGION }}
          # Add your deployment commands here

      - name: Health Check
        run: |
          echo "Performing health check..."
          # Add actual health check commands here

      - name: Notify Deployment Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const message = `Deployment to production ${status}`;
            if (context.payload.pull_request) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.name,
                body: message
              });
            }
