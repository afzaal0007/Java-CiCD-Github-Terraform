name: CI-CD-Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: production-${{ github.ref }}
  cancel-in-progress: true

# Define variables that need to be passed to reusable workflows
defaults:
  run:
    shell: bash

env:
  ECR_REPOSITORY: myapp
  EKS_CLUSTER_NAME: my-cluster
  TERRAFORM_VERSION: 1.5.0
  PRODUCTION_URL: https://your-production-url.com

permissions:
  id-token: write
  contents: read

jobs:
  deploy-infrastructure:
    uses: ./.github/workflows/infra-deploy.yml
    with:
      aws_role_arn: ${{ vars.AWS_ROLE_ARN || secrets.AWS_ROLE_ARN }}
      aws_region: ${{ vars.AWS_REGION || secrets.AWS_REGION }}
      terraform_version: "1.5.0"  # Hardcoded or use vars/secrets
    secrets: inherit

  build-and-push:
    uses: ./.github/workflows/build-push.yml
    needs: deploy-infrastructure
    with:
      aws_role_arn: ${{ vars.AWS_ROLE_ARN || secrets.AWS_ROLE_ARN }}
      aws_region: ${{ vars.AWS_REGION || secrets.AWS_REGION }}
      ecr_repository: "myapp"  # Hardcoded or use vars/secrets
    secrets: inherit

  deploy-application:
    name: Deploy Application
    needs:
      - build-and-push
      - deploy-infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment:
      name: production
      url: ${{ env.PRODUCTION_URL }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: |
            ~/.kube
            ~/.helm
          key: ${{ runner.os }}-k8s-${{ hashFiles('**/*.yaml') }}
          restore-keys: |
            ${{ runner.os }}-k8s-

      - name: Verify deploy script exists
        run: test -f .github/workflows/scripts/deploy.sh || (echo "Deploy script not found" && exit 1)

      - name: Deploy Application to EKS
        env:
          AWS_ROLE_ARN: ${{ vars.AWS_ROLE_ARN || secrets.AWS_ROLE_ARN }}
          AWS_REGION: ${{ vars.AWS_REGION || secrets.AWS_REGION }}
          EKS_CLUSTER_NAME: ${{ env.EKS_CLUSTER_NAME }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag }}
        run: |
          chmod +x .github/workflows/scripts/deploy.sh
          .github/workflows/scripts/deploy.sh \
            "$AWS_ROLE_ARN" \
            "$AWS_REGION" \
            "$EKS_CLUSTER_NAME" \
            "$ECR_REPOSITORY" \
            "$IMAGE_TAG" || exit 1

      - name: Health Check
        run: |
          echo "Performing health check..."
          # Add actual health check commands here

      - name: Notify Deployment Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const message = `Deployment to production ${status}`;
            if (context.payload.pull_request) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.name,
                body: message
              });
            }