name: CI-CD-Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
concurrency:
  group: production
  cancel-in-progress: true
env:
  ECR_REPOSITORY: myapp
  EKS_CLUSTER_NAME: my-cluster
  TERRAFORM_VERSION: 1.5.0

permissions:
  id-token: write
  contents: read

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Ensuring repo is cloned first

      - name: Verify Directory Structure
        run: ls -la .github/workflows && ls -la terraform

      - uses: actions/cache@v4
        with:
          path: ~/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Deploy Infrastructure
        id: terraform-deploy
        uses: ./.github/workflows/infra-deploy.yml  # Reference reusable workflow
        with:
          aws_role_arn: ${{ secrets.AWS_ROLE_ARN }}
          aws_region: ${{ secrets.AWS_REGION }}
          terraform_version: ${{ env.TERRAFORM_VERSION }}

  build-and-push:
    name: Build and Push Docker Image
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and Push
        id: build
        uses: ./.github/workflows/build-push.yml  # Reference reusable workflow
        with:
          aws_role_arn: ${{ secrets.AWS_ROLE_ARN }}
          aws_region: ${{ secrets.AWS_REGION }}
          ecr_repository: ${{ env.ECR_REPOSITORY }}

  deploy-application:
    name: Deploy Application
    needs: [build-and-push, deploy-infrastructure]
    runs-on: ubuntu-latest
    timeout-minutes: 7
    environment:
      name: production
      url: https://your-production-url.com
    if: ${{ success() }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: |
            ~/.kube
            ~/.helm
          key: ${{ runner.os }}-k8s-${{ hashFiles('**/*.yaml') }}
          restore-keys: |
            ${{ runner.os }}-k8s-

      - name: Deploy Application
        id: deploy
        run: |
          ./github/workflows/Deploy-Helm-Charts-to-EKS.yml \
          --aws_role_arn=${{ secrets.AWS_ROLE_ARN }} \
          --aws_region=${{ secrets.AWS_REGION }} \
          --eks_cluster_name=${{ env.EKS_CLUSTER_NAME }} \
          --ecr_repository=${{ env.ECR_REPOSITORY }} \
          --image_tag=${{ needs.build-and-push.outputs.image_tag }}

      - name: Health Check
        if: success()
        run: |
          echo "Performing health check..."

      - name: Notify Deployment Status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = ${{ job.status }}
            const message = `Deployment to production ${status}`
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: message
            })
